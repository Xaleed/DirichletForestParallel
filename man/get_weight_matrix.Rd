% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dirichlet_forest.R
\name{get_weight_matrix}
\alias{get_weight_matrix}
\title{Get Weight Matrix for Multiple Test Samples}
\usage{
get_weight_matrix(forest_model, X_test)
}
\arguments{
\item{forest_model}{A forest model created by \code{\link{DirichletForest}} with store_samples = TRUE}

\item{X_test}{Numeric matrix of test samples (m x p), where m is number of test samples.
Can also be a single vector or 1-row matrix for a single test sample.}
}
\value{
A list with:
\describe{
\item{weight_matrix}{Numeric matrix (m x n) where entry \link{i,j} is the weight of
training sample j for test sample i. Each row sums to 1.0}
\item{sample_indices}{Integer vector 1:n (all training sample indices in order)}
\item{Y_values}{Matrix of Y values for ALL training samples (n x k)}
}
}
\description{
Computes sample weights for multiple test observations at once.
Each row of the output matrix contains weights for one test sample,
showing how much each training sample contributed to that prediction.
}
\details{
The weight matrix shows which training samples influenced each prediction.
Most weights will be zero; non-zero weights indicate training samples that
fell into the same leaf nodes as the test sample across the forest.

The predictions can be verified using matrix multiplication:
\code{predicted_Y = weight_matrix \%*\% Y_values}
}
\examples{
\donttest{
# Setup
library(DirichletForestParallel)
n <- 100
p <- 4
X <- matrix(rnorm(n * p), n, p)
Y <- MCMCpack::rdirichlet(n, c(2, 3, 4))
X_test <- matrix(rnorm(10 * p), 10, p)

# Build forest with store_samples = TRUE
f <- DirichletForest(X, Y, B = 50, store_samples = TRUE)

# Get weight matrix for all test samples
weights <- get_weight_matrix(f, X_test)

# Examine structure
dim(weights$weight_matrix)  # 10 x 100 (10 test samples, 100 training samples)

# Weights for first test sample
cat("Weights for test sample 1:\n")
print(head(weights$weight_matrix[1, ]))

# Count non-zero weights per test sample
non_zero <- rowSums(weights$weight_matrix > 1e-10)
cat("\nNon-zero weights per test sample:\n")
print(non_zero)

# Find most influential training samples for test sample 1
top_5 <- order(weights$weight_matrix[1, ], decreasing = TRUE)[1:5]
cat("\nTop 5 influential training samples for test sample 1:\n")
print(data.frame(
  train_index = top_5,
  weight = round(weights$weight_matrix[1, top_5], 4),
  Y_comp1 = round(weights$Y_values[top_5, 1], 3)
))

# Verify predictions match
pred <- PredictDirichletForest(f, X_test)
manual_pred <- weights$weight_matrix \%*\% weights$Y_values
cat("\nMax prediction difference:", 
    max(abs(pred$mean_predictions - manual_pred)), "\n")

# Single test sample also works
weights_single <- get_weight_matrix(f, X_test[1, , drop = FALSE])
dim(weights_single$weight_matrix)  # 1 x 100
}
}
